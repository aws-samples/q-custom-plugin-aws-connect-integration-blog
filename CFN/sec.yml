################# Apache License ########################################
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#################################################################################

Parameters:
  ContainerPort:
    Type: Number

  AmazonQUrl:
    Type: String

  RepositoryName:
    Type: String
Mappings:
  ELBAccountIDMap:
    us-east-1:
      AccountID: '127311923021'
    us-east-2:
      AccountID: '033677994240'
    us-west-1:
      AccountID: '027434742980'
    us-west-2:
      AccountID: '797873946194'
Resources:
  ECRRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Ref RepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true

  CodeBuildKMSKey:
   Type: AWS::KMS::Key
   Properties:
     Description: KMS key for CodeBuild project encryption
     EnableKeyRotation: true
     KeyPolicy:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Principal:
             AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
           Action: 'kms:*'
           Resource: '*'
 
     
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-angular-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      EncryptionKey: !GetAtt CodeBuildKMSKey.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}
          - Name: AMAZON_Q_URL
            Value: !Ref AmazonQUrl   
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI
                - echo Cloning repository...
                - git clone https://github.com/aws-samples/q-custom-plugin-aws-connect-integration-blog.git repo
                - cd repo/web
            build:
              commands:
                - echo Build started on `date`
                - echo Installing dependencies...
                - npm install
                - echo Updating env.template.js with AMAZON_Q_URL
                - sed -i "s|\${AMAZON_Q_URL}|$AMAZON_Q_URL|g" src/assets/env.template.js
                - echo Building Angular app...
                - npm run build -- --configuration production
                - echo Building the Docker image...
                - docker build -t $ECR_REPO_URI:latest .
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $ECR_REPO_URI:latest

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !GetAtt CodeBuildKMSKey.Arn
        - PolicyName: CodeBuildServiceRolePolicys3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::aws-blogs-artifacts-public/*"
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-angular-build:*
              - Effect: Allow
                Action:
                 - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}
  CodeBuildTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildTriggerLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CodeBuildTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CodeBuildTriggerLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      codebuild = boto3.client('codebuild')
                      build = codebuild.start_build(projectName=event['ResourceProperties']['ProjectName'])
                      build_id = build['build']['id']
                      
                      while True:
                          build_status = codebuild.batch_get_builds(ids=[build_id])['builds'][0]['buildStatus']
                          if build_status == 'SUCCEEDED':
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'BuildId': build_id})
                              return
                          elif build_status in ['FAILED', 'FAULT', 'STOPPED', 'TIMED_OUT']:
                              cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': f'Build failed with status: {build_status}'})
                              return
                          time.sleep(10)
                  except Exception as e:
                      print(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 900
      ReservedConcurrentExecutions: 10

  # TriggerCodeBuild:
  #   Type: Custom::TriggerCodeBuild
  #   Properties:
  #     ServiceToken: !GetAtt CodeBuildTriggerLambda.Arn
  #     ProjectName: !Ref CodeBuildProject
  #   DependsOn: CodeBuildProject

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Angular-App-VPC
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
  
  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCFlowLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt VPCFlowLogGroup.Arn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !GetAtt VPCFlowLogKMSKey.Arn

  
  VPCFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      KmsKeyId: !GetAtt VPCFlowLogKMSKey.Arn

  VPCFlowLogKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for VPC Flow Logs encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: 
              - 'kms:Encrypt*'
              - 'kms:Decrypt*'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:Describe*'
            Resource: '*'
  VPCFlowLogKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-vpc-flow-logs'
      TargetKeyId: !Ref VPCFlowLogKMSKey

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Angular-App-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Angular-App-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Angular-App-Public-Subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Angular-App-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: angular-app-cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/angular-app-task
      RetentionInDays: 30
      KmsKeyId: !GetAtt LogGroupKMSKey.Arn

  LogGroupKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for CloudWatch Logs encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: 
              - 'kms:Encrypt*'
              - 'kms:Decrypt*'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:Describe*'
            Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: angular-app-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: angular-app-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:latest
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LogGroupKMSKey.Arn

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LogGroupKMSKey.Arn

  ECSServiceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSServiceLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateService
                  - ecs:DeleteService
                  - ecs:DescribeServices
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ECSCluster}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ExecutionRole.Arn
                  - !GetAtt TaskRole.Arn
  
  ECSServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ECSServiceLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      ecs = boto3.client('ecs')
                      response = ecs.create_service(
                          cluster=event['ResourceProperties']['ClusterName'],
                          serviceName=event['ResourceProperties']['ServiceName'],
                          taskDefinition=event['ResourceProperties']['TaskDefinition'],
                          desiredCount=int(event['ResourceProperties']['DesiredCount']),
                          launchType='FARGATE',
                          networkConfiguration={
                              'awsvpcConfiguration': {
                                  'subnets': event['ResourceProperties']['Subnets'].split(','),
                                  'securityGroups': [event['ResourceProperties']['SecurityGroup']],
                                  'assignPublicIp': 'ENABLED'
                              }
                          },
                          loadBalancers=[
                              {
                                  'targetGroupArn': event['ResourceProperties']['TargetGroupArn'],
                                  'containerName': 'angular-app-container',
                                  'containerPort': int(event['ResourceProperties']['ContainerPort'])
                              }
                          ]
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'ServiceArn': response['service']['serviceArn']})
                  except Exception as e:
                      print(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
              elif event['RequestType'] == 'Delete':
                  try:
                      ecs = boto3.client('ecs')
                      ecs.delete_service(
                          cluster=event['ResourceProperties']['ClusterName'],
                          service=event['ResourceProperties']['ServiceName'],
                          force=True
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      print(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
      Runtime: python3.12
      Timeout: 300
      ReservedConcurrentExecutions: 10

  ECSService:
    Type: Custom::ECSService
    DependsOn: 
      - ALBListener
      - TriggerCodeBuild
      - ALBToECSSecurityGroupEgress 
      - ALB
    Properties:
      ServiceToken: !GetAtt ECSServiceLambda.Arn
      ClusterName: !Ref ECSCluster
      ServiceName: angular-app-service
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      Subnets: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
      SecurityGroup: !Ref ContainerSecurityGroup
      TargetGroupArn: !Ref ALBTargetGroup
      ContainerPort: !Ref ContainerPort

  TriggerCodeBuild:
    Type: Custom::TriggerCodeBuild
    DependsOn: 
      - ECRRepository
      - CodeBuildProject
    Properties:
      ServiceToken: !GetAtt CodeBuildTriggerLambda.Arn
      ProjectName: !Ref CodeBuildProject

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow inbound traffic from ALB on container port
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS outbound traffic
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP outbound traffic

  ECRCleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRCleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:ListImages
                  - ecr:BatchDeleteImage
                Resource: !GetAtt ECRRepository.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  ECRCleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ECRCleanupLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  try:
                      ecr = boto3.client('ecr')
                      repository_name = event['ResourceProperties']['RepositoryName']
                      
                      # List all image IDs in the repository
                      response = ecr.list_images(repositoryName=repository_name)
                      image_ids = response['imageIds']
                      
                      # Delete all images
                      if image_ids:
                          ecr.batch_delete_image(
                              repositoryName=repository_name,
                              imageIds=image_ids
                          )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      print(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 300
      ReservedConcurrentExecutions: 10
  ECRCleanup:
    Type: Custom::ECRCleanup
    Properties:
      ServiceToken: !GetAtt ECRCleanupLambda.Arn
      RepositoryName: !Ref RepositoryName

  ECSCleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSCleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListServices
                  - ecs:DeleteService
                  - ecs:ListTasks
                  - ecs:StopTask
                  - ecs:DescribeServices
                  - ecs:UpdateService 
                  - ecs:DescribeTasks
                  - ecs:ListTaskDefinitions
                  - ecs:DescribeTaskDefinition
                  - ecs:DeregisterTaskDefinition
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  ECSCleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ECSCleanupLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          from botocore.exceptions import ClientError
  
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              elif event['RequestType'] == 'Delete':
                  try:
                      ecs = boto3.client('ecs')
                      cluster_name = event['ResourceProperties']['ClusterName']
                      service_name = 'angular-app-service'
  
                      try:
                          # Update the service to 0 desired count
                          ecs.update_service(cluster=cluster_name, service=service_name, desiredCount=0)
                          print(f"Updated service {service_name} to 0 desired count")
  
                          # Wait for the service to have 0 running tasks (with timeout)
                          start_time = time.time()
                          while True:
                              response = ecs.describe_services(cluster=cluster_name, services=[service_name])
                              if response['services'][0]['runningCount'] == 0:
                                  break
                              if time.time() - start_time > 300:  # 5 minutes timeout
                                  raise Exception("Timeout waiting for service to scale down to 0 tasks")
                              time.sleep(10)
  
                      except ecs.exceptions.ServiceNotFoundException:
                          print(f"Service {service_name} not found, skipping update")
                      except ClientError as e:
                          if e.response['Error']['Code'] == 'ServiceNotActiveException':
                              print(f"Service {service_name} is not active, skipping update")
                          else:
                              raise
  
                      # Try to delete the service
                      try:
                          ecs.delete_service(cluster=cluster_name, service=service_name, force=True)
                          print(f"Deleted service {service_name}")
                      except ecs.exceptions.ServiceNotFoundException:
                          print(f"Service {service_name} not found, skipping deletion")
                      except ClientError as e:
                          if e.response['Error']['Code'] == 'ServiceNotActiveException':
                              print(f"Service {service_name} is not active, skipping deletion")
                          else:
                              raise
  
                      # Stop all remaining tasks in the cluster
                      tasks = ecs.list_tasks(cluster=cluster_name)['taskArns']
                      for task in tasks:
                          try:
                              ecs.stop_task(cluster=cluster_name, task=task)
                              print(f"Stopped task {task}")
                          except ClientError as e:
                              print(f"Error stopping task {task}: {str(e)}")
  
                      # Wait for all tasks to stop (with timeout)
                      start_time = time.time()
                      while tasks:
                          if time.time() - start_time > 300:  # 5 minutes timeout
                              raise Exception("Timeout waiting for all tasks to stop")
                          time.sleep(10)
                          tasks = ecs.list_tasks(cluster=cluster_name)['taskArns']
  
                      print("All tasks stopped")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      print(f"Error during cleanup: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
  
      Runtime: python3.9
      Timeout: 900  # 15 minutes
      ReservedConcurrentExecutions: 10
  
  ECSCleanup:
    Type: Custom::ECSCleanup
    Properties:
      ServiceToken: !GetAtt ECSCleanupLambda.Arn
      ClusterName: !Ref ECSCluster

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow http from anywhere
  ALBToECSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      DestinationSecurityGroupId: !Ref ContainerSecurityGroup
      Description: Allow traffic to ECS containers

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: 
      - ALBLogBucketPolicy
      - ALBLogBucket
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref ALBLogBucket
        - Key: access_logs.s3.prefix
          Value: 'alb-logs'
  
  ALBLogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
         BlockPublicAcls: true
         BlockPublicPolicy: true
         IgnorePublicAcls: true
         RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ALBLogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - 'arn:aws:iam::${ELBAccountID}:root'
                - ELBAccountID: !FindInMap [ELBAccountIDMap, !Ref 'AWS::Region', AccountID]
            Action: 's3:PutObject'
            Resource: !Sub '${ALBLogBucket.Arn}/alb-logs/AWSLogs/${AWS::AccountId}/*'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Name: angular-app-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  S3BucketCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3BucketCleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                  - 's3:ListBucketVersions'
                Resource:
                  - !Sub '${ALBLogBucket.Arn}'
                  - !Sub '${ALBLogBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  S3BucketCleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt S3BucketCleanupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def delete_all_objects(bucket_name):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket_name)
              
              versioned_objects = bucket.object_versions.all()
              object_deletion = [{'Key': o.object_key, 'VersionId': o.id} for o in versioned_objects]
              
              while object_deletion:
                  response = bucket.delete_objects(Delete={'Objects': object_deletion[:1000]})
                  if 'Errors' in response:
                      for error in response['Errors']:
                          print(f"Error deleting object {error['Key']} version {error['VersionId']}: {error['Message']}")
                  object_deletion = object_deletion[1000:]

          def lambda_handler(event, context):
              if event['RequestType'] == 'Delete':
                  bucket_name = event['ResourceProperties']['BucketName']
                  try:
                      delete_all_objects(bucket_name)
                      print(f"Emptied bucket: {bucket_name}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'message': f'Successfully emptied bucket: {bucket_name}'})
                  except Exception as e:
                      print(f"Error emptying bucket {bucket_name}: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

      Runtime: python3.12
      Timeout: 900
      ReservedConcurrentExecutions: 10

  S3BucketCleanup:
    Type: Custom::S3BucketCleanup
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambda.Arn
      BucketName: !Ref ALBLogBucket

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId

  PublicSubnet1:
    Description: The ID of Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: The ID of Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName

  ALBDNSName:
    Description: The DNS name of the ALB
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ALBDNSName

  ECRRepositoryName:
    Description: ECR Repository Name
    Value: !Ref RepositoryName
  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}