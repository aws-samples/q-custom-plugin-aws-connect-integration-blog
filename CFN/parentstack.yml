##################### Apache License ########################################

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#################################################################################

AWSTemplateFormatVersion: '2010-09-09'
Description: Parent stack that manages two child stacks

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment to deploy into
    AllowedValues: [dev, uat, prod]
  Audience:
    Type: String
    Description: 'Audience for HTTP API Authorizer'
  Issuer:
    Type: String
    Description: 'Issuer for HTTP API Authorizer'
  IdcInstanceArn:
    Type: String
    Description: "ARN of the Identity Center (IDC) Instance"  
  PluginDisplayName:
    Type: String
    Description: 'The display name for the plugin'
    MinLength: 1
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z0-9][a-zA-Z0-9_-]*$'
    Default: 'CreateCase'
  ClientId:
    Type: String
    Description: 'OAuth2 Client ID'
    NoEcho: true
  ClientSecret:
    Type: String
    Description: 'OAuth2 Client Secret'
    NoEcho: true
  AuthorizationUrl:
    Type: String
    Description: 'OAuth2 Authorization URL'
    NoEcho: true
  TokenUrl:
    Type: String
    Description: 'OAuth2 Token URL'
    NoEcho: true
  ContainerPort:
    Type: Number 
    Default: 80
    Description: What port number the application inside the docker container is binding to
  RepositoryName:
    Type: String
    Default: "repo-demo"
    Description: "Base name for the ECR repository"
    AllowedPattern: "^[a-z-0-9]*$"
    ConstraintDescription: "Repository name must contain only lowercase letters, numbers, and hyphens."

Resources:
  TemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
         BlockPublicAcls: true
         BlockPublicPolicy: true
         IgnorePublicAcls: true
         RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplatesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFormationAccess
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${TemplatesBucket.Arn}/*'
          - Sid: AllowLambdaAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt CustomResourceLambdaRole.Arn
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
            Resource: !Sub '${TemplatesBucket.Arn}/*'
        
  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${TemplatesBucket.Arn}/*'

  DownloadTemplatesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.handler
      Timeout: 300
      ReservedConcurrentExecutions: 10
      MemorySize: 256
      Role: !GetAtt CustomResourceLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import urllib3
          import json
          import cfnresponse

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      print("Starting template download process")
                      s3 = boto3.client('s3')
                      http = urllib3.PoolManager()
                      bucket = event['ResourceProperties']['BucketName']
                      
                      # GitHub raw content URLs for the templates
                      base_url = "https://raw.githubusercontent.com/aws-samples/q-custom-plugin-aws-connect-integration-blog/refs/heads/main/CFN"
                      templates = {
                          'childstack1.yml': f"{base_url}/childstack1.yml",
                          'childstack2.yml': f"{base_url}/childstack2.yml"
                      }
                      
                      # Download and upload templates
                      for template_name, template_url in templates.items():
                          print(f"Downloading {template_name} from {template_url}")
                          response = http.request('GET', template_url)
                          print(f"Download status code: {response.status}")
                          
                          if response.status == 200:
                              print(f"Uploading {template_name} to S3")
                              s3.put_object(
                                  Bucket=bucket,
                                  Key=template_name,
                                  Body=response.data
                              )
                              print(f"Successfully uploaded {template_name}")
                          else:
                              raise Exception(f"Failed to download {template_name}: {response.status}")
                      
                      responseData = {
                          'Bucket': bucket,
                          'ChildStack1Url': f"https://{bucket}.s3.amazonaws.com/childstack1.yml",
                          'ChildStack2Url': f"https://{bucket}.s3.amazonaws.com/childstack2.yml"
                      }
                      print("Process completed successfully")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  DownloadTemplates:
    Type: Custom::DownloadTemplates
    Properties:
      ServiceToken: !GetAtt DownloadTemplatesFunction.Arn
      BucketName: !Ref TemplatesBucket

  ChildStack1:
    Type: AWS::CloudFormation::Stack
    DependsOn: DownloadTemplates
    Properties:
      TemplateURL: !Sub 'https://${TemplatesBucket.DomainName}/childstack1.yml'
      Parameters:
        Environment: !Ref Environment
        Audience: !Ref Audience
        Issuer: !Ref Issuer
        IdcInstanceArn: !Ref IdcInstanceArn
        PluginDisplayName: !Ref PluginDisplayName
        ClientId: !Ref ClientId
        ClientSecret: !Ref ClientSecret
        AuthorizationUrl: !Ref AuthorizationUrl
        TokenUrl: !Ref TokenUrl

  ChildStack2:
    Type: AWS::CloudFormation::Stack
    DependsOn: ChildStack1
    Properties:
      TemplateURL: !Sub 'https://${TemplatesBucket.DomainName}/childstack2.yml'
      Parameters:
        AmazonQUrl: !GetAtt ChildStack1.Outputs.QBizWebexperienceURL
        ContainerPort: !Ref ContainerPort
        RepositoryName: !Ref RepositoryName

Outputs:
  BucketName:
    Description: "Name of the created S3 bucket"
    Value: !Ref TemplatesBucket
  QBizWebexperienceURL:
    Description: "URL of the Amazon Q Web Experience"
    Value: !GetAtt ChildStack1.Outputs.QBizWebexperienceURL
  ALBDNSName:
    Description: "DNS Name of the ALB"
    Value: !GetAtt ChildStack2.Outputs.ALBDNSName
